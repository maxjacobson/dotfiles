#!/usr/bin/env sh

# create and change into a directory
function md () {
  mkdir -p "$@" && cd "$@";
}

# list path on multiple lines
# via https://twitter.com/FriedDaniel/status/402108515637919745
function path {
 echo "${PATH//:/$'\n'}"
}

# browse files in selecta, and open your choice in vim
function edit {
 vim $(find . -not -path './.*/*' | selecta)
}

# find Rails routes matching the argument
function routes {
 rake routes | sed 's/^ *//g' | grep $1
}

# The idea here is:
# type `ruby `
# press `Control s`
# choose a file in the current directory with selecta's help
# it pastes that file so now I have `ruby somefile.rb` inserted at my prompt
# By default, ^S freezes terminal output and ^Q resumes it. Disable that so
# that those keys can be used for other things.
unsetopt flowcontrol
# Run Selecta in the current working directory, appending the selected path, if
# any, to the current command, followed by a space.
function insert-selecta-path-in-command-line() {
    local selected_path
    # Print a newline or we'll clobber the old prompt.
    echo
    # Find the path; abort if the user doesn't select anything.
    selected_path=$(find * -type f | selecta) || return
    # Append the selection to the current command buffer.
    eval 'LBUFFER="$LBUFFER$selected_path "'
    # Redraw the prompt since Selecta has drawn several new lines of text.
    zle reset-prompt
}
# Create the zle widget
zle -N insert-selecta-path-in-command-line
# Bind the key to the newly created widget
bindkey "^S" "insert-selecta-path-in-command-line"

########## tmux helper functions #########################
# inspired by / mostly stolen from:
# https://github.com/unmanbearpig/.bash/blob/master/tmux.sh
function _clean_up_session_name {
    echo $1 | tr . -
}

function _open_tmux {
    session_name=$(_clean_up_session_name $1)
    if [[ $TMUX ]]; then
        tmux switch-client -t $session_name
    else
        tmux new-session -A -s $session_name
    fi
}

# enter tmux
# use the name of my current directory for the session name
# if a session already exists with that name, just attach to it
function t {
    if [[ $# == 0 ]]; then
        session_name=`basename $PWD`
    elif [[ $# == 1 ]]; then
        if [[ -d $1 ]]; then
            cd $1
            session_name=`basename $PWD`
        else
            session_name=$1
        fi
    fi

    session_name=`_clean_up_session_name "$session_name"`

    _open_tmux $session_name
}

# attach to a previously-running tmux session
function ta {
  # if no argument was supplied, just attach to the most-recently-used session
  if [[ -z $1 ]]; then
    tmux attach

  # if an argument was supplied, attach to a specific session
  else
    tmux attach -t "$1"
  fi
}

# list the background sessions
function tl {
  tmux ls
}

########## end tmux helper functions #####################
